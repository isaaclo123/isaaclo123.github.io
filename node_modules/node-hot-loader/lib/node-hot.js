#!/usr/bin/env node
'use strict';

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _loader = require('./loader');

var _loader2 = _interopRequireDefault(_loader);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const options = {
  config: 'webpack.config.js',
  fork: false
};

const params = _yargs2.default.config(options).usage('Usage: $0 [args]').help('help').alias('help', 'h').alias('help', '?').version(_package2.default.version).alias('version', 'v').options({
  config: {
    type: 'string',
    describe: 'Path to the webpack config file',
    defaultDescription: 'webpack.config.js',
    requiresArg: false
  },
  fork: {
    type: 'boolean',
    describe: 'Launch compiled assets in forked process',
    defaultDescription: 'false',
    requiresArg: false
  }
}).example('node-hot --config webpack.config.js', 'Using a specific webpack config file.').example('node-hot', 'Using default webpack config file.').showHelpOnFail(false, 'Use the --help option to get the list of available options.').check(args => {
  if (!_fs2.default.existsSync(args.config)) {
    throw new Error(`Webpack config file '${args.config}' not found!`);
  }
  return true;
}).strict().argv;

if (!_path2.default.isAbsolute(params.config)) {
  options.config = _path2.default.join(process.cwd(), params.config);
}
options.fork = params.fork;

(0, _loader2.default)(options);